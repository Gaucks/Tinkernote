<?php

namespace Tinkernote\SiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * AnnonceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnonceRepository extends EntityRepository
{
    /**
     * @param $recherche
     * @return array
     * '%' permet de rechercher un mot dans un texte
     * sinon il faut mettre le texte complet du genre "Le titre de l'annonce"
     * au lieu de simplement "annonce" ou "titre" etc.
     */
    public function recherche($recherche = null, $region = null){

        $qb = $this->createQueryBuilder('a')
                    ->select('a, u')
                    ->where('a.title like :recherche')
                    ->Orwhere('a.region = :region')
                    ->setParameter('region', $region)
                    ->setParameter('recherche', '%'.$recherche.'%');

        return $qb->getQuery()->getResult();
    }

    public function rechercher($recherche, $region, $category)
    {
        if($recherche != NULL )
        {
            if(($region != null) AND ($category != null))
            {
                $qb = $this->createQueryBuilder('a')
                    ->select( 'a','v','d','r','u','c')
                    ->leftJoin('a.ville', 'v')
                    ->leftJoin('v.departement', 'd')
                    ->leftJoin('d.region', 'r')
                    ->leftJoin('a.user', 'u')
                    ->leftJoin('a.category','c')
                    ->having('r.id = :region') // Pour avoir la région selectionner en parametre principal
                    ->andHaving('c.id = :category') // Pour avoir la categorie selectionner en parametre principal
                    ->Where('a.title like :recherche')
                    ->orWhere('u.username like :recherche')
                    ->orWhere('a.title = :recherche')
                    ->setParameters(array('recherche' => '%'.$recherche.'%', 'region' => $region,'category' => $category));
            }

            if(($region != null) AND ($category == null))
            {
                $qb = $this->createQueryBuilder('a')
                    ->select( 'a','v','d','r','u')
                    ->leftJoin('a.ville', 'v')
                    ->leftJoin('v.departement', 'd')
                    ->leftJoin('d.region', 'r')
                    ->leftJoin('a.user', 'u')
                    ->having('r.id = :region') // Pour avoir la région selectionner en parametre principal
                    ->Where('a.title like :recherche')
                    ->orWhere('u.username like :recherche')
                    ->orWhere('a.title = :recherche')
                    ->setParameters(array('recherche' => '%'.$recherche.'%', 'region' => $region));
            }

            if(($region == null) AND ($category == null))
            {
                $qb = $this->createQueryBuilder('a')
                    ->select( 'a, u')
                    ->leftJoin('a.user', 'u')
                    ->Where('a.title like :recherche')
                    ->orWhere('u.username like :recherche')
                    ->orWhere('a.content like :recherche')
                    ->setParameters(array('recherche' => '%'.$recherche.'%'));
            }

            if(($region == null) AND ($category != null))
            {
                $qb = $this->createQueryBuilder('a')
                    ->select( 'a','c')
                    ->leftJoin('a.category','c')
                    ->having('c.id = :category')
                    ->andWhere('a.title like :recherche')
                    ->orWhere('a.content like :recherche')
                    ->setParameters(array('recherche' => '%'.$recherche.'%', 'category' => $category));
            }

        }
        else
        {
            if(($region != null) AND ($category != null))
            {
                $qb = $this->createQueryBuilder('a')
                    ->select( 'a','v','d','r','c')
                    ->leftJoin('a.ville', 'v')
                    ->leftJoin('v.departement', 'd')
                    ->leftJoin('d.region', 'r')
                    ->leftJoin('a.category','c')
                    ->having('r.id = :region') // Pour avoir la région selectionner en parametre principal
                    ->andHaving('c.id = :category') // Pour avoir la categorie selectionner en parametre principal
                    ->setParameters(array('region' => $region,'category' => $category));
            }

            if(($region != null) AND ($category == null))
            {
                $qb = $this->createQueryBuilder('a')
                    ->select( 'a','v','d','r')
                    ->leftJoin('a.ville', 'v')
                    ->leftJoin('v.departement', 'd')
                    ->leftJoin('d.region', 'r')
                    ->having('r.id = :region') // Pour avoir la région selectionner en parametre principal
                    ->setParameters(array('region' => $region));
            }

            if(($region == null) AND ($category != null))
            {
                $qb = $this->createQueryBuilder('a')
                    ->select( 'a','c')
                    ->leftJoin('a.category','c')
                    ->having('c.id = :region')
                    ->setParameter('category', $category);
            }
        }

        $qb->addOrderBy('a.id', 'desc');

        return $qb->getQuery()->getResult();
    }

    public function CountTotalAnnonces($user)
    {
        return $this->createQueryBuilder('a')
            ->select('COUNT(a)')
            ->where('a.user = :user')
            ->setParameter('user', $user->getId())
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function CountTotalActiveAnnonce($user)
    {
        return $this->createQueryBuilder('a')
            ->select('COUNT(a)')
            ->where('a.user = :user')
            ->setParameter('user', $user)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function CountDayliAnnonce()
    {
        $today = new \Datetime();
        $today->setTime ( 0, 0, 0 );

        $qb = $this->createQueryBuilder('a')
            ->select('count(a)')
            ->where('a.date = :today')
            ->setParameter('today', $today )
            ->getQuery();

        $response = $qb->getSingleScalarResult();

        return $response;
    }

    public function CountDayliAnnonceInMyRegion($user)
    {
        $region = $user->getVille()->getDepartement()->getRegion();
        $today = new \Datetime();
        $today->setTime ( 0, 0, 0 );

        $qb = $this->createQueryBuilder('a')
            ->select('count(a)')
            ->addSelect( 'a','v','d','r')
            ->leftJoin('a.ville', 'v')
            ->leftJoin('v.departement', 'd')
            ->leftJoin('d.region', 'r')
            ->where('a.date = :today')
            ->where('r.id = :region') // Pour avoir la région selectionner en parametre principal
            ->setParameters( array('today' => $today, 'region' => $region ))
            ->getQuery();

        $response = $qb->getSingleScalarResult();

        return $response;
    }

    public function findExceptedMe($user){

        $region = $user->getVille()->getDepartement()->getRegion();

        $user = $user->getId();

        $qb = $this->createQueryBuilder('a')
            ->select( 'a','v','d','r','u')
            ->leftJoin('a.ville', 'v')
            ->leftJoin('v.departement', 'd')
            ->leftJoin('d.region', 'r')
            ->leftJoin('a.user', 'u')
            ->where('r.id = :region') // Pour avoir la région selectionner en parametre principal
            ->andWhere('u.id != :user') // Pour selectionner toutes les annonces qui ne correspondent pas à mon ID
            ->orderBy('a.date','desc')
            ->setParameters(array('user' => $user, 'region' => $region))
            ->getQuery();

        return $qb->getResult();
    }

}
